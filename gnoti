#!/usr/bin/env python

import os
import signal
import json
import time
import threading
import secretstorage

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('AppIndicator3', '0.1')
gi.require_version('Notify', '0.7')

from gi.repository import Gtk
from gi.repository import AppIndicator3 as appindicator
from gi.repository import Notify as notify

from emailreader import Email
from credentials import Credentials

APPINDICATOR_ID = 'gnotiindicator'

class Application:

    def __init__(self):
        self.get_credentials()
        self.reader = Email(self.secret.get("email").get_secret(), 
                            self.secret.get("password").get_secret(),
                            self.last_uid)
        th = threading.Thread(target=self.checkmail)
        th.daemon = True
        th.start()

        self.indicator = appindicator.Indicator.new(APPINDICATOR_ID, 
                                                    os.path.abspath('email.svg'), 
                                                    appindicator.IndicatorCategory.SYSTEM_SERVICES)
        self.indicator.set_status(appindicator.IndicatorStatus.ACTIVE)
        self.indicator.set_menu(self.build_menu(self.indicator))
        notify.init(APPINDICATOR_ID)
        Gtk.main()

    def get_credentials(self):
        bus = secretstorage.dbus_init()
        collection = secretstorage.get_default_collection(bus)
        attributes = {'application': 'gnoti'}

        while collection.is_locked():
            time.sleep(10)

        items = collection.search_items(attributes)
        self.secret = {item.get_label(): item for item in items}  
        uiditem = self.secret.get("uid")
        if uiditem.get_secret() == None:
            uiditem = collection.create_item('uid', attributes, "-1")
        self.last_uid = int(uiditem.get_secret())

    def checkmail(self):
        while True:
            try:
                unread, emails = self.reader.unread()
                for msg_from, msg_subject in emails:
                    self.noti(msg_from, msg_subject)
                self.update_icon(unread)
            except:
                pass
            time.sleep(30)

    def update_icon(self, unread):
        if unread:
            icon = os.path.abspath('email_new.svg')
        else:
            icon = os.path.abspath('email.svg')
        self.indicator.set_icon(icon)

    def show_settings(self, _):
        dialog = Credentials(self.secret.get("email").get_secret(),
                             self.secret.get("password").get_secret())
        response = dialog.run()
        if response == Gtk.ResponseType.OK:
            gmail = dialog.gmail.get_text()
            password = dialog.pwinput.get_text()
            self.secret[email] = gmail
            self.secret[password] = password
        dialog.destroy()

    def build_menu(self, indicator):
        menu = Gtk.Menu()
        item_settings = Gtk.MenuItem('Settings')
        item_settings.connect('activate', self.show_settings)
        menu.append(item_settings)
        item_quit = Gtk.MenuItem('Quit')
        item_quit.connect('activate', self.quit)
        menu.append(item_quit)
        menu.show_all()
        return menu

    def noti(self, msg_from, msg_subject):
        notify.Notification.new(msg_from, msg_subject, None).show()

    def quit(self, _):
        notify.uninit()
        Gtk.main_quit()


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    Application()
